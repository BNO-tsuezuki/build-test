AWSTemplateFormatVersion: '2010-09-09'
Description: "Stack for Network"


Parameters:
  EnvName:
    Description: "Name of Environment"
    Type: String

  KeyPairName:
    Description: Enter a Public/private key pair. If you do not have one in this region, please create it before continuing
    Type: 'AWS::EC2::KeyPair::KeyName'

  KvsPortNo:
    Type: Number
    Default: 6379
  KvsPortNoCeiling:
    Type: Number
    Default: 6389

  RdbPortNo:
    Type: Number
    Default: 3306

  NatInstanceAMI:
    Type: String
    Default: ami-0589b7f94831e06c1

  NatInstanceType:
    Default: t2.micro
    Description: Amazon EC2 instance type
    Type: String


Mappings: 
  Const:
    Cidr:
      Vpc: "10.0.0.0/16"

Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !FindInMap [Const,Cidr,Vpc]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      # InstanceTenancy: String
      Tags:
        - Key: Name
          Value: !Sub "jpop-${EnvName}"

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub "jpop-${EnvName}"

  VPCGA:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
      # VpnGatewayId: String


####################
#    RouteTable    #
####################

# Public

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: VPCGA
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "jpop-public-${EnvName}"

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGA
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      # DestinationIpv6CidrBlock: String
      # EgressOnlyInternetGatewayId: String
      GatewayId: !Ref IGW
      # InstanceId: String
      # NatGatewayId: String
      # NetworkInterfaceId: String
      RouteTableId: !Ref PublicRouteTable
      # VpcPeeringConnectionId: String

################
#    Subnet    #
################

# Public

  PublicSubnet0:
    Type: AWS::EC2::Subnet
    DependsOn: VPCGA
    Properties:
      # AssignIpv6AddressOnCreation: Boolean
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.0.0.0/22
      # Ipv6CidrBlock: String
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub "jpop-public-0-${EnvName}"
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPCGA
    Properties:
      # AssignIpv6AddressOnCreation: Boolean
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.0.4.0/22
      # Ipv6CidrBlock: String
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: !Sub "jpop-public-1-${EnvName}"
      VpcId: !Ref VPC
  PublicSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet0
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1


#############
#    RDB    #
#############
  DBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: !Sub "for ${EnvName}."
      DBSubnetGroupName: !Sub "${EnvName}-dbsubnetgroup"
      SubnetIds:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
      # Tags:
      #   - Resource Tag 

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # GroupName: !Sub "${EnvName}-DB"
      GroupDescription: "-"
      # SecurityGroupEgress:
      #   - Security Group Rule
      SecurityGroupIngress:
        -
          CidrIp: !FindInMap [Const,Cidr,Vpc]
          FromPort: !Ref RdbPortNo
          ToPort: !Ref RdbPortNo
          IpProtocol: "tcp"
        -
          Description: "BNO"
          CidrIp: 221.112.67.210/32
          FromPort: !Ref RdbPortNo
          ToPort: !Ref RdbPortNo
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.177/32
          FromPort: !Ref RdbPortNo
          ToPort: !Ref RdbPortNo
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.45/32
          FromPort: !Ref RdbPortNo
          ToPort: !Ref RdbPortNo
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.210/32
          FromPort: !Ref RdbPortNo
          ToPort: !Ref RdbPortNo
          IpProtocol: "tcp"

      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-DB"
      VpcId: !Ref VPC

  DBClusterParameterGroup:
    Type: "AWS::RDS::DBClusterParameterGroup"
    Properties: 
      Description: !Sub "for ${EnvName}."
      Family: "aurora-mysql5.7"
      Parameters:
        time_zone: "UTC"
        character_set_client: "utf8mb4"
        character_set_connection: "utf8mb4"
        character_set_database: "utf8mb4"
        character_set_results: "utf8mb4"
        character_set_server: "utf8mb4"
      # Tags:
      #   - Resource Tag 

  DBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      # AvailabilityZones: !GetAZs  ''
      #   - String
      # BacktrackWindow: Integer
      # BackupRetentionPeriod: 10
      DatabaseName: "evogamedb"
      DBClusterIdentifier: !Sub "${EnvName}-all"
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DeletionProtection: false
      EnableCloudwatchLogsExports:
        - general
        - error
        - slowquery
        - audit
      EnableIAMDatabaseAuthentication: false
      Engine: "aurora-mysql"
      # EngineMode: String
      # EngineVersion: String
      # KmsKeyId: String
      MasterUsername: evouser
      MasterUserPassword: evopassword
      Port: !Ref RdbPortNo
      # PreferredBackupWindow: "20:00-20:30"
      PreferredMaintenanceWindow: "sun:21:00-sun:21:30"
      # ReplicationSourceIdentifier: String
      # ScalingConfiguration: 
      #   ScalingConfiguration
      # SnapshotIdentifier: String
      # StorageEncrypted: Boolean
      # Tags:
      #   - Resource Tag
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: !Sub "for ${EnvName}."
      Family: "aurora-mysql5.7"
      # Parameters:
      #   DBParameters
      # Tags:
      #   - Resource Tag 

  DBOptionGroup:
    Type: "AWS::RDS::OptionGroup"
    Properties: 
      EngineName: "aurora-mysql"
      MajorEngineVersion: "5.7"
      OptionGroupDescription: !Sub "for ${EnvName}."
      # OptionConfigurations:
      #   - OptionConfiguration
      Tags:
        - Key: Name
          Value: !Sub "${EnvName}"

  DBInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: VPCGA
    Properties:
      # AllocatedStorage: String
      # AllowMajorVersionUpgrade: Boolean
      AutoMinorVersionUpgrade: false
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      # BackupRetentionPeriod: String
      # CharacterSetName: String
      # CopyTagsToSnapshot: Boolean
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: "db.t2.small"
      DBInstanceIdentifier: !Sub "write-instance-${EnvName}"
      # DBName: String
      DBParameterGroupName: !Ref DBParameterGroup
      # DBSecurityGroups:
      #   - String
      # DBSnapshotIdentifier: String
      # DBSubnetGroupName: String
      # DeleteAutomatedBackups: Boolean
      # DeletionProtection: Boolean
      # Domain: String
      # DomainIAMRoleName: String
      # EnableCloudwatchLogsExports:
      #   - String
      # EnableIAMDatabaseAuthentication: Boolean
      # EnablePerformanceInsights: Boolean
      Engine: "aurora-mysql"
      # EngineVersion: String
      # Iops: Integer
      # KmsKeyId: String
      # LicenseModel: String
      # MasterUsername: String
      # MasterUserPassword: String
      # MonitoringInterval: Integer
      # MonitoringRoleArn: String
      # MultiAZ: Boolean
      OptionGroupName: !Ref DBOptionGroup
      # PerformanceInsightsKMSKeyId: String
      # PerformanceInsightsRetentionPeriod: Integer
      # Port: String
      # PreferredBackupWindow: String
      # PreferredMaintenanceWindow: String
      # ProcessorFeatures:
      #   - ProcessorFeature
      # PromotionTier: Integer
      PubliclyAccessible: true
      # SourceDBInstanceIdentifier: String
      # SourceRegion: String
      # StorageEncrypted: Boolean
      # StorageType: String
      # Tags:
      #   - Resource Tag
      # Timezone: String
      # VPCSecurityGroups:
      #   - String



#############
#    KVS    #
#############

  ElastiCacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub "${EnvName}-kvssubnetgroup"
      Description: "-"
      SubnetIds:
        - !Ref PublicSubnet0
        - !Ref PublicSubnet1
  ElastiCacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # GroupName: !Sub "${EnvName}-KVS"
      GroupDescription: "-"
      # SecurityGroupEgress:
      #   - Security Group Rule
      SecurityGroupIngress:
        -
          CidrIp: !FindInMap [Const,Cidr,Vpc]
          # CidrIpv6: String
          # Description: String
          FromPort: !Ref KvsPortNo
          IpProtocol: "tcp"
          # SourceSecurityGroupId: String
          # SourceSecurityGroupName: String
          # SourceSecurityGroupOwnerId: String
          ToPort: !Ref KvsPortNo

      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-KVS"
      VpcId: !Ref VPC
  
  ElastiCacheParameterGroup:
    Type: AWS::ElastiCache::ParameterGroup
    Properties: 
      CacheParameterGroupFamily: "redis5.0"
      Description: "-"
      Properties:
         cluster-enabled: "no"
         slowlog-log-slower-than: 3000

  CacheCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties: 
      # AZMode: String
      # AutoMinorVersionUpgrade: Boolean
      CacheNodeType: cache.t2.micro
      CacheParameterGroupName: !Ref ElastiCacheParameterGroup
      # CacheSecurityGroupNames: 
      #   - String
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      ClusterName: !Sub "${EnvName}-redis"
      Engine: "redis"
      EngineVersion: "5.0.4"
      # NotificationTopicArn: String
      NumCacheNodes: 1
      Port: !Ref KvsPortNo
      # PreferredAvailabilityZone: String
      # PreferredAvailabilityZones: 
      #   - String
      # PreferredMaintenanceWindow: String
      # SnapshotArns: 
      #   - String
      # SnapshotName: String
      # SnapshotRetentionLimit: Integer
      # SnapshotWindow: String
      # Tags: 
      #   - Tag
      VpcSecurityGroupIds: 
         - !Ref ElastiCacheSecurityGroup



  #####################
  #    NatInstance    #
  #####################
  NatInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: 2012-10-17
      # ManagedPolicyArns:
      #   - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'

  NatInstanceInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref NatInstanceRole
      Path: /

  NatInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      # GroupName: !Sub "${EnvName}-KVS"
      GroupDescription: "-"
      # SecurityGroupEgress:
      #   - Security Group Rule
      SecurityGroupIngress:
        -
          Description: "BNO"
          CidrIp: 221.112.67.210/32
          FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.177/32
          FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.45/32
          FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.210/32
          FromPort: 22
          ToPort: 22
          IpProtocol: "tcp"

        -
          Description: "BNO"
          CidrIp: 221.112.67.210/32
          FromPort: !Ref KvsPortNo
          ToPort: !Ref KvsPortNoCeiling
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.177/32
          FromPort: !Ref KvsPortNo
          ToPort: !Ref KvsPortNoCeiling
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.45/32
          FromPort: !Ref KvsPortNo
          ToPort: !Ref KvsPortNoCeiling
          IpProtocol: "tcp"
        -
          Description: "BNO Cato VPN"
          CidrIp: 103.203.222.210/32
          FromPort: !Ref KvsPortNo
          ToPort: !Ref KvsPortNoCeiling
          IpProtocol: "tcp"

      Tags:
        - Key: Name
          Value: !Sub "${EnvName}-NatInstance"
      VpcId: !Ref VPC


  NatInstance:
    Type: AWS::EC2::Instance
    Properties:
      # Affinity: String
      # AvailabilityZone: String
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true
      # CreditSpecification: CreditSpecification
      # DisableApiTermination: Boolean
      # EbsOptimized: Boolean
      # ElasticGpuSpecifications: [ ElasticGpuSpecification, ... ]
      # ElasticInferenceAccelerators: 
      #   - ElasticInferenceAccelerator
      # HostId: String
      IamInstanceProfile: !Ref NatInstanceInstanceProfile
      ImageId: !Ref NatInstanceAMI
      # InstanceInitiatedShutdownBehavior: String
      InstanceType: !Ref NatInstanceType
      # Ipv6AddressCount: Integer
      # Ipv6Addresses:
      #   - IPv6 Address Type
      # KernelId: String
      KeyName: !Ref KeyPairName
      # LaunchTemplate: LaunchTemplateSpecification
      # LicenseSpecifications: 
      #   - LicenseSpecification
      # Monitoring: Boolean
      # NetworkInterfaces: 
      #   - EC2 Network Interface
      # PlacementGroupName: String
      # PrivateIpAddress: String
      # RamdiskId: String
      SecurityGroupIds: 
        - Fn::GetAtt:
          - NatInstanceSecurityGroup
          - GroupId
      # SecurityGroups: 
      #   - String
      # SourceDestCheck: Boolean
      # SsmAssociations: 
      #   - SSMAssociation
      SubnetId: !Ref PublicSubnet0
      Tags: 
        - Key: Name
          Value: !Sub "jpop-natinstance-${EnvName}"
      # Tenancy: String
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash
            - |+


            - |
              # test echo
            - 'echo '
            - !Ref 'AWS::StackName'
            - |+


            - |
              # cfn-init
            - '/opt/aws/bin/cfn-init -c order -v'
            - ' -s '
            - !Ref 'AWS::StackName'
            - ' --region '
            - !Ref 'AWS::Region'
            - ' -r NatInstance '
            - |+


            - |
              # cfn-signal
            - '/opt/aws/bin/cfn-signal -e $? --stack '
            - !Ref 'AWS::StackName'
            - ' --resource NatInstance --region '
            - !Ref 'AWS::Region'
            - |+


            - |
              # eof
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT30M

    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          order:
            - misc
            - rmate
            - firstonetime-sh
            - firstonetime
            - mysql-client
            - redis

        misc:
          commands:
            0_export-PS1:
              command: echo 'export PS1="[\u@natinstance \w]$"' >> /home/ec2-user/.bashrc

        rmate:
          commands:
            0_download:
              command: "curl https://raw.githubusercontent.com/textmate/rmate/master/bin/rmate -o/usr/bin/rmate"
            1_chmod:
              command: "chmod a+x /usr/bin/rmate"

        firstonetime-sh:
          files:
            /home/ec2-user/firstonetime.sh:
                mode: "000777"
                owner: ec2-user
                group: ec2-user
                content:
                  'Fn::Join':
                    - ''
                    - - |+
                        #!/bin/sh

                        set -eu

                      - >-
                        KVS_ENDPOINT=
                      - !GetAtt CacheCluster.RedisEndpoint.Address
                      - |+


                      - >-
                        KVS_PORTNO=
                      - !Ref KvsPortNo
                      - |+


                        KVS_PORTNO_TMP=$KVS_PORTNO


                        KVS_IPS=`dig $KVS_ENDPOINT +short`

                        for ip in $KVS_IPS
                        do
                            iptables -t nat -A PREROUTING -i eth0 -p tcp --dport $KVS_PORTNO_TMP -j DNAT --to $ip:$KVS_PORTNO
                            ((KVS_PORTNO_TMP++))
                        done

                        service iptables save
        
        firstonetime:
          commands:
            0_exec:
              command: sh /home/ec2-user/firstonetime.sh

        mysql-client:
          commands:
            0_localinstall:
              command: "sudo yum localinstall https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm -y"
            1_disable80:
              command: "sudo yum-config-manager --disable mysql80-community"
            2_enable57:
              command: "sudo yum-config-manager --enable mysql57-community"
            3_install:
              command: "sudo yum install mysql-community-client -y"

        redis:
          commands:
            0_install:
              command: "sudo yum --enablerepo=epel install redis -y"



      # Volumes: 
      #   - EC2 MountPoint
      # AdditionalInfo: String

Outputs:
  RdbEndPoint:
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: !Sub "jpop-RdbEndPoint-${EnvName}"
  RdbPort:
    Value: !Ref RdbPortNo
    Export:
      Name: !Sub "jpop-RdbPortNo-${EnvName}"
  KvsEndPoint:
    Value: !GetAtt NatInstance.PublicDnsName
    Export:
      Name: !Sub "jpop-KvsEndPoint-${EnvName}"
  KvsPort:
    Value: !Ref KvsPortNo
    Export:
      Name: !Sub "jpop-KvsPortNo-${EnvName}"
